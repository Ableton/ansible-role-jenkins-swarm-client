---
- include_vars: "{{ role_path }}/defaults/{{ ansible_os_family | lower }}.yml"

- name: Run user setup tasks
  include_tasks: "{{ role_path }}/tasks/windows/add-jenkins-user.yml"

- name: Check if reboot is necessary
  set_fact:
    chocolatey_reboot_necessary: false

- name: Ensure chocolatey is installed
  win_chocolatey:
    name: chocolatey
    state: present

- name: Install Chocolatey packages
  win_chocolatey:
    name: "{{ item.key }}"
    install_args: "{{ item.value.install_args }}"
    params: "{{ item.value.params }}"
    state: present
  with_dict: "{{ jenkins_node_packages }}"
  register: chocolatey_result
  # Error code 3010 means that a reboot is necessary following installation
  # of the package.
  failed_when: >
    chocolatey_result.rc is defined and
    chocolatey_result.rc != 0 and
    chocolatey_result.rc != 3010

- name: Check if reboot is necessary
  set_fact:
    chocolatey_reboot_necessary: true
  when: item.rc is defined and item.rc == 3010
  with_items: "{{ chocolatey_result.results }}"

- name: Reboot Windows host
  win_shell: Restart-Computer -Force
  when: chocolatey_reboot_necessary

- name: Wait for host to come back online
  wait_for_connection:
    delay: 10
  when: chocolatey_reboot_necessary

# TODO: Can this file be combined with unix/install.yml?
# It's exactly the same logic, except that the Windows one
# uses the win_* modules. Maybe the generic "action" module
# would solve this problem.
- name: Ensure Jenkins working directory exists
  win_file:
    path: "{{ jenkins_swarm_home }}"
    state: directory

- name: Write labels to file
  win_template:
    src: "{{ role_path }}/files/labels.txt.j2"
    dest: "{{ jenkins_swarm_labels_file }}"

- name: Copy swarm plugin client
  win_copy:
    src: "{{ role_path }}/files/{{ jenkins_swarm_jar }}"
    dest: "{{ jenkins_swarm_jar_path }}"

- name: Copy logging properties file
  win_copy:
    src: "{{ role_path }}/files/logging.properties"
    dest: "{{ jenkins_swarm_logging_properties }}"

# It is necessary for us to remove and re-create this service since NSSM will
# fail with an error when creating the service if it already exists. This
# could be mitigated by adding "ignore_errors: true" to the service creation
# step, but I would prefer to recreate the service rather than suppress any
# errors which may occur while creating it. Also, we need to make sure that
# if the arguments in jenkins_swarm_cmd change then they are added to the
# NSSM service.
- name: Remove Windows service
  win_service:
    name: "{{ jenkins_swarm_service_name }}"
    state: absent
  ignore_errors: true

- name: Create Windows service with NSSM
  win_shell: >
    nssm.exe install \
      '{{ jenkins_swarm_service_name }}' \
      {{ jenkins_swarm_cmd | join(" ") }}

- name: Set service startup directory
  win_shell: >
    nssm.exe set \
      '{{ jenkins_swarm_service_name }}' \
      AppDirectory {{ jenkins_swarm_home }}

- name: Set Jenkins Swarm Client to run as Jenkins user
  win_shell: >
    nssm.exe set \
      '{{ jenkins_swarm_service_name }}' \
      ObjectName .\\{{ jenkins_config_owner }} {{ jenkins_user_password }}
